// Code generated by protoc-gen-go. DO NOT EDIT.
// source: delivery.proto

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	delivery.proto

It has these top-level messages:
	DeliverRequest
	DeliverResponse
	Envelope
	Timestamp
	Parcel
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DeliverRequest struct {
	Envelope *Envelope `protobuf:"bytes,1,opt,name=envelope" json:"envelope,omitempty"`
}

func (m *DeliverRequest) Reset()                    { *m = DeliverRequest{} }
func (m *DeliverRequest) String() string            { return proto.CompactTextString(m) }
func (*DeliverRequest) ProtoMessage()               {}
func (*DeliverRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DeliverRequest) GetEnvelope() *Envelope {
	if m != nil {
		return m.Envelope
	}
	return nil
}

type DeliverResponse struct {
	EnqueueTime  *Timestamp `protobuf:"bytes,1,opt,name=enqueueTime" json:"enqueueTime,omitempty"`
	ErrorMessage string     `protobuf:"bytes,2,opt,name=errorMessage" json:"errorMessage,omitempty"`
}

func (m *DeliverResponse) Reset()                    { *m = DeliverResponse{} }
func (m *DeliverResponse) String() string            { return proto.CompactTextString(m) }
func (*DeliverResponse) ProtoMessage()               {}
func (*DeliverResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DeliverResponse) GetEnqueueTime() *Timestamp {
	if m != nil {
		return m.EnqueueTime
	}
	return nil
}

func (m *DeliverResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type Envelope struct {
	// fixed data
	Payload          []byte            `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Attributes       map[string]string `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DestinationTopic string            `protobuf:"bytes,3,opt,name=destinationTopic" json:"destinationTopic,omitempty"`
	UndeliveredTopic string            `protobuf:"bytes,4,opt,name=undeliveredTopic" json:"undeliveredTopic,omitempty"`
	PublishAfter     *Timestamp        `protobuf:"bytes,5,opt,name=publishAfter" json:"publishAfter,omitempty"`
	MaxRetries       uint32            `protobuf:"varint,6,opt,name=maxRetries" json:"maxRetries,omitempty"`
}

func (m *Envelope) Reset()                    { *m = Envelope{} }
func (m *Envelope) String() string            { return proto.CompactTextString(m) }
func (*Envelope) ProtoMessage()               {}
func (*Envelope) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Envelope) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Envelope) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Envelope) GetDestinationTopic() string {
	if m != nil {
		return m.DestinationTopic
	}
	return ""
}

func (m *Envelope) GetUndeliveredTopic() string {
	if m != nil {
		return m.UndeliveredTopic
	}
	return ""
}

func (m *Envelope) GetPublishAfter() *Timestamp {
	if m != nil {
		return m.PublishAfter
	}
	return nil
}

func (m *Envelope) GetMaxRetries() uint32 {
	if m != nil {
		return m.MaxRetries
	}
	return 0
}

type Timestamp struct {
	Seconds uint64 `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
}

func (m *Timestamp) Reset()                    { *m = Timestamp{} }
func (m *Timestamp) String() string            { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()               {}
func (*Timestamp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Timestamp) GetSeconds() uint64 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

type Parcel struct {
	Envelope *Envelope `protobuf:"bytes,1,opt,name=envelope" json:"envelope,omitempty"`
	// in flight data
	EnqueueTime  *Timestamp `protobuf:"bytes,2,opt,name=enqueueTime" json:"enqueueTime,omitempty"`
	RequeueCount uint32     `protobuf:"varint,3,opt,name=requeueCount" json:"requeueCount,omitempty"`
	RetryCount   uint32     `protobuf:"varint,4,opt,name=retryCount" json:"retryCount,omitempty"`
}

func (m *Parcel) Reset()                    { *m = Parcel{} }
func (m *Parcel) String() string            { return proto.CompactTextString(m) }
func (*Parcel) ProtoMessage()               {}
func (*Parcel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Parcel) GetEnvelope() *Envelope {
	if m != nil {
		return m.Envelope
	}
	return nil
}

func (m *Parcel) GetEnqueueTime() *Timestamp {
	if m != nil {
		return m.EnqueueTime
	}
	return nil
}

func (m *Parcel) GetRequeueCount() uint32 {
	if m != nil {
		return m.RequeueCount
	}
	return 0
}

func (m *Parcel) GetRetryCount() uint32 {
	if m != nil {
		return m.RetryCount
	}
	return 0
}

func init() {
	proto.RegisterType((*DeliverRequest)(nil), "main.DeliverRequest")
	proto.RegisterType((*DeliverResponse)(nil), "main.DeliverResponse")
	proto.RegisterType((*Envelope)(nil), "main.Envelope")
	proto.RegisterType((*Timestamp)(nil), "main.Timestamp")
	proto.RegisterType((*Parcel)(nil), "main.Parcel")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DeliveryService service

type DeliveryServiceClient interface {
	Deliver(ctx context.Context, in *DeliverRequest, opts ...grpc.CallOption) (*DeliverResponse, error)
}

type deliveryServiceClient struct {
	cc *grpc.ClientConn
}

func NewDeliveryServiceClient(cc *grpc.ClientConn) DeliveryServiceClient {
	return &deliveryServiceClient{cc}
}

func (c *deliveryServiceClient) Deliver(ctx context.Context, in *DeliverRequest, opts ...grpc.CallOption) (*DeliverResponse, error) {
	out := new(DeliverResponse)
	err := grpc.Invoke(ctx, "/main.DeliveryService/Deliver", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DeliveryService service

type DeliveryServiceServer interface {
	Deliver(context.Context, *DeliverRequest) (*DeliverResponse, error)
}

func RegisterDeliveryServiceServer(s *grpc.Server, srv DeliveryServiceServer) {
	s.RegisterService(&_DeliveryService_serviceDesc, srv)
}

func _DeliveryService_Deliver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServiceServer).Deliver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.DeliveryService/Deliver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServiceServer).Deliver(ctx, req.(*DeliverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeliveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.DeliveryService",
	HandlerType: (*DeliveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deliver",
			Handler:    _DeliveryService_Deliver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "delivery.proto",
}

func init() { proto.RegisterFile("delivery.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xdf, 0x6a, 0xd4, 0x40,
	0x14, 0xc6, 0x49, 0x36, 0xdd, 0x76, 0xcf, 0x6e, 0x77, 0xcb, 0x50, 0x21, 0xf4, 0xa2, 0x84, 0x80,
	0x10, 0x7a, 0x11, 0x70, 0x0b, 0x22, 0xa2, 0x42, 0xd1, 0x5e, 0x78, 0x21, 0xc8, 0xd8, 0x17, 0x98,
	0x4d, 0x8e, 0x76, 0x30, 0x99, 0xc9, 0xce, 0x9f, 0x60, 0x9e, 0xc9, 0x97, 0xf1, 0x91, 0x24, 0x99,
	0x4d, 0xdc, 0x44, 0x2f, 0xec, 0x5d, 0xce, 0x2f, 0xdf, 0xf9, 0x93, 0x8f, 0x2f, 0xb0, 0xce, 0xb1,
	0xe0, 0x35, 0xaa, 0x26, 0xad, 0x94, 0x34, 0x92, 0x04, 0x25, 0xe3, 0x22, 0x7e, 0x03, 0xeb, 0x0f,
	0x8e, 0x53, 0xdc, 0x5b, 0xd4, 0x86, 0xdc, 0xc0, 0x19, 0x8a, 0x1a, 0x0b, 0x59, 0x61, 0xe8, 0x45,
	0x5e, 0xb2, 0xdc, 0xae, 0xd3, 0x56, 0x9a, 0xde, 0x1f, 0x28, 0x1d, 0xde, 0xc7, 0x8f, 0xb0, 0x19,
	0xba, 0x75, 0x25, 0x85, 0x46, 0xf2, 0x02, 0x96, 0x28, 0xf6, 0x16, 0x2d, 0x3e, 0xf0, 0xb2, 0x9f,
	0xb0, 0x71, 0x13, 0x5a, 0xa2, 0x0d, 0x2b, 0x2b, 0x7a, 0xac, 0x21, 0x31, 0xac, 0x50, 0x29, 0xa9,
	0x3e, 0xa1, 0xd6, 0xec, 0x1b, 0x86, 0x7e, 0xe4, 0x25, 0x0b, 0x3a, 0x62, 0xf1, 0x2f, 0x1f, 0xce,
	0xfa, 0x03, 0x48, 0x08, 0xa7, 0x15, 0x6b, 0x0a, 0xc9, 0xf2, 0x6e, 0xfe, 0x8a, 0xf6, 0x25, 0x79,
	0x07, 0xc0, 0x8c, 0x51, 0x7c, 0x67, 0x0d, 0xea, 0xd0, 0x8f, 0x66, 0xc9, 0x72, 0x7b, 0x3d, 0x3e,
	0x3f, 0xbd, 0x1b, 0x04, 0xf7, 0xc2, 0xa8, 0x86, 0x1e, 0x75, 0x90, 0x1b, 0xb8, 0xc8, 0x51, 0x1b,
	0x2e, 0x98, 0xe1, 0x52, 0x3c, 0xc8, 0x8a, 0x67, 0xe1, 0xac, 0x3b, 0xe7, 0x2f, 0xde, 0x6a, 0xad,
	0x38, 0x98, 0x8a, 0xb9, 0xd3, 0x06, 0x4e, 0x3b, 0xe5, 0xe4, 0x16, 0x56, 0x95, 0xdd, 0x15, 0x5c,
	0x3f, 0xde, 0x7d, 0x35, 0xa8, 0xc2, 0x93, 0x7f, 0xdb, 0x32, 0x12, 0x91, 0x6b, 0x80, 0x92, 0xfd,
	0xa0, 0x68, 0x14, 0x47, 0x1d, 0xce, 0x23, 0x2f, 0x39, 0xa7, 0x47, 0xe4, 0xea, 0x2d, 0x6c, 0x26,
	0xdf, 0x42, 0x2e, 0x60, 0xf6, 0x1d, 0x9b, 0xce, 0x95, 0x05, 0x6d, 0x1f, 0xc9, 0x25, 0x9c, 0xd4,
	0xac, 0xb0, 0xbd, 0xab, 0xae, 0x78, 0xed, 0xbf, 0xf2, 0xe2, 0xe7, 0xb0, 0x18, 0x36, 0xb7, 0x96,
	0x6a, 0xcc, 0xa4, 0xc8, 0x75, 0xd7, 0x1c, 0xd0, 0xbe, 0x8c, 0x7f, 0x7a, 0x30, 0xff, 0xcc, 0x54,
	0x86, 0xc5, 0x53, 0xa2, 0x31, 0xcd, 0x81, 0xff, 0x7f, 0x39, 0x50, 0xd8, 0x95, 0xef, 0xa5, 0x15,
	0xa6, 0x33, 0xfe, 0x9c, 0x8e, 0x58, 0xeb, 0x89, 0x42, 0xa3, 0x1a, 0xa7, 0x08, 0x9c, 0x27, 0x7f,
	0xc8, 0xf6, 0xe3, 0x90, 0xc8, 0xe6, 0x0b, 0xaa, 0x9a, 0x67, 0x48, 0x5e, 0xc2, 0xe9, 0x01, 0x91,
	0x4b, 0xb7, 0x7f, 0x9c, 0xf8, 0xab, 0x67, 0x13, 0xea, 0x92, 0xbc, 0x9b, 0x77, 0xff, 0xc9, 0xed,
	0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb5, 0xf2, 0xf0, 0xb3, 0x39, 0x03, 0x00, 0x00,
}
